openapi: 3.0.3
info:
  title: AreaLink API
  version: 1.0.0
  description: <h1>College Area Management API</h1>
paths:
  /api/restaurant/info/:
    get:
      operationId: restaurant_info_retrieve
      description: |-
        Retrieve restaurant information.
        If store_id is provided, it will return the restaurant information for that store.
      summary: Retrieve data, optionally filtered by store ID
      parameters:
      - in: query
        name: store_id
        schema:
          type: integer
        description: Optional ID of the store to filter data for.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: restaurant_info_create
      description: |-
        Add a new restaurant entry.
        The request should contain a JSON object with the restaurant details.
      tags:
      - restaurant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantInfo'
          description: ''
    put:
      operationId: restaurant_info_update
      description: |-
        Update an existing restaurant entry.
        The request should contain a JSON object with the updated restaurant details.
      tags:
      - restaurant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantInfo'
          description: ''
    delete:
      operationId: restaurant_info_destroy
      description: |-
        Delete an existing restaurant entry.
        The request should contain the store_id of the restaurant to be deleted.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/restaurant/menu/:
    get:
      operationId: restaurant_menu_retrieve
      description: Handles CRUD operations for Restaurant Menus.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: restaurant_menu_create
      description: Handles CRUD operations for Restaurant Menus.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: restaurant_menu_update
      description: Handles CRUD operations for Restaurant Menus.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: restaurant_menu_destroy
      description: Handles CRUD operations for Restaurant Menus.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/restaurant/menu/item/:
    get:
      operationId: restaurant_menu_item_retrieve
      description: Handles CRUD operations for Menu Items.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: restaurant_menu_item_create
      description: Handles CRUD operations for Menu Items.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: restaurant_menu_item_update
      description: Handles CRUD operations for Menu Items.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: restaurant_menu_item_destroy
      description: Handles CRUD operations for Menu Items.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/restaurant/order/:
    get:
      operationId: restaurant_order_retrieve
      description: Handles CRUD operations for Orders.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: restaurant_order_create
      description: Handles CRUD operations for Orders.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: restaurant_order_update
      description: Handles CRUD operations for Orders.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: restaurant_order_destroy
      description: Handles CRUD operations for Orders.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/restaurant/order/item/:
    get:
      operationId: restaurant_order_item_retrieve
      description: Handles CRUD operations for Order Items.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: restaurant_order_item_create
      description: Handles CRUD operations for Order Items.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: restaurant_order_item_update
      description: Handles CRUD operations for Order Items.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: restaurant_order_item_destroy
      description: Handles CRUD operations for Order Items.
      tags:
      - restaurant
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/stores/restaurant/info/:
    get:
      operationId: stores_restaurant_info_retrieve
      description: |-
        Retrieve restaurant information.
        If store_id is provided, it will return the restaurant information for that store.
      summary: Retrieve data, optionally filtered by store ID
      parameters:
      - in: query
        name: store_id
        schema:
          type: integer
        description: Optional ID of the store to filter data for.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
    post:
      operationId: stores_restaurant_info_create
      description: |-
        Add a new restaurant entry.
        The request should contain a JSON object with the restaurant details.
      tags:
      - stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantInfo'
          description: ''
    put:
      operationId: stores_restaurant_info_update
      description: |-
        Update an existing restaurant entry.
        The request should contain a JSON object with the updated restaurant details.
      tags:
      - stores
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RestaurantInfo'
        required: true
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestaurantInfo'
          description: ''
    delete:
      operationId: stores_restaurant_info_destroy
      description: |-
        Delete an existing restaurant entry.
        The request should contain the store_id of the restaurant to be deleted.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/stores/restaurant/menu/:
    get:
      operationId: stores_restaurant_menu_retrieve
      description: Handles CRUD operations for Restaurant Menus.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: stores_restaurant_menu_create
      description: Handles CRUD operations for Restaurant Menus.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: stores_restaurant_menu_update
      description: Handles CRUD operations for Restaurant Menus.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: stores_restaurant_menu_destroy
      description: Handles CRUD operations for Restaurant Menus.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/stores/restaurant/menu/item/:
    get:
      operationId: stores_restaurant_menu_item_retrieve
      description: Handles CRUD operations for Menu Items.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: stores_restaurant_menu_item_create
      description: Handles CRUD operations for Menu Items.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: stores_restaurant_menu_item_update
      description: Handles CRUD operations for Menu Items.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: stores_restaurant_menu_item_destroy
      description: Handles CRUD operations for Menu Items.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/stores/restaurant/order/:
    get:
      operationId: stores_restaurant_order_retrieve
      description: Handles CRUD operations for Orders.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: stores_restaurant_order_create
      description: Handles CRUD operations for Orders.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: stores_restaurant_order_update
      description: Handles CRUD operations for Orders.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: stores_restaurant_order_destroy
      description: Handles CRUD operations for Orders.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/stores/restaurant/order/item/:
    get:
      operationId: stores_restaurant_order_item_retrieve
      description: Handles CRUD operations for Order Items.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: stores_restaurant_order_item_create
      description: Handles CRUD operations for Order Items.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: stores_restaurant_order_item_update
      description: Handles CRUD operations for Order Items.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: stores_restaurant_order_item_destroy
      description: Handles CRUD operations for Order Items.
      tags:
      - stores
      security:
      - jwtAuth: []
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    RestaurantInfo:
      type: object
      description: Serializer for the Restaurant model.
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          description: restaurant name
          maxLength: 255
        description:
          type: string
          nullable: true
          description: Short description of the restaurant
        address:
          type: string
          description: Full address of the restaurant
        city:
          type: string
          description: City where the restaurant is located
          maxLength: 100
        state:
          type: string
          description: State where the restaurant is located
          maxLength: 100
        pincode:
          type: string
          description: Postal code of the restaurant
          maxLength: 10
        phone:
          type: string
          nullable: true
          description: restaurant contact number
          maxLength: 20
        email:
          type: string
          format: email
          nullable: true
          description: restaurant email address
          maxLength: 254
        opening_time:
          type: string
          format: time
          description: Opening time of the restaurant
        closing_time:
          type: string
          format: time
          description: Closing time of the restaurant
        is_active:
          type: boolean
          description: Whether the restaurant is active or not
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Time when the restaurant was created
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Last updated timestamp
        store:
          type: integer
          description: User who owns the restaurant.
      required:
      - address
      - city
      - closing_time
      - created_at
      - id
      - name
      - opening_time
      - pincode
      - state
      - store
      - updated_at
  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
